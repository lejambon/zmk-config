#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#undef CUT
#undef COPY
#undef UNDO

#define KP(k)       &kp k
#define HL(a,b,c,d) &hrl LCTRL a &hrl LALT b &hrl LGUI c &hrl LSHFT d
#define HR(a,b,c,d) &hrr RSHFT a &hrr RGUI b &hrr RALT c &hrr RCTRL d
#define L1(t)       &lt 1 t
#define L2(t)       &lt 2 t
#define BT(c)       &bt BT_##c
#define BOOT        &bootloader
#define _____       &trans
#define xxxxx       &none

#if defined(KEYMAP_OS_LINUX)
    #define SEL_ALL     &kp LC(A)
    #define CUT         &kp LC(X)
    #define COPY        &kp LC(C)
    #define PASTE       &kp LC(V)
    #define UNDO        &kp LC(Z)
    #define REDO        &kp LC(LS(Z))
#elif defined(KEYMAP_OS_MAC)
    #define SEL_ALL     &kp LG(A)
    #define CUT         &kp LG(X)
    #define COPY        &kp LG(C)
    #define PASTE       &kp LG(V)
    #define UNDO        &kp LG(Z)
    #define REDO        &kp LG(LS(Z))
#else
    #error("KEYMAP_OS_LINUX or KEYMAP_OS_MAC not set")
#endif

#define QUICK_TAP   175

#define KEYS_L      0 1 2 3 4 10 11 12 13 14 20 21 22 23 24
#define KEYS_R      5 6 7 8 9 15 16 17 18 19 25 26 27 28 29
#define KEYS_T      30 31 32 33

#define MAKE_HRM(NAME, TRIGGER_POS) \
        NAME: NAME { \
            compatible = "zmk,behavior-hold-tap"; \
            #binding-cells = <2>; \
            flavor = "balanced"; \
            tapping-term-ms = <280>; \
            quick-tap-ms = <QUICK_TAP>; \
            require-prior-idle-ms = <150>; \
            bindings = <&kp>, <&kp>; \
            hold-trigger-key-positions = <TRIGGER_POS>; \
            hold-trigger-on-release; \
        };

&lt {
    quick-tap-ms = <QUICK_TAP>;
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        both {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    behaviors {
        MAKE_HRM(hrl, KEYS_R KEYS_T)
        MAKE_HRM(hrr, KEYS_L KEYS_T)
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "base";
            bindings = <
                KP(J)       KP(G)       KP(M)       KP(P)       KP(V)           KP(SEMI)    KP(DOT)     KP(FSLH)    KP(SQT)     KP(DQT)
                HL(R,          S,          N,          D)       KP(B)           KP(COMMA)   HR(A,          E,          I,          H)
                KP(X)       KP(F)       KP(L)       KP(C)       KP(W)           KP(MINUS)   KP(U)       KP(O)       KP(Y)       KP(K)
                                                    KP(BSPC)    L1(T)           L2(SPACE)   KP(ENTER)
            >;
        };

        left {
            display-name = "left";
            bindings = <
                KP(Z)       KP(Q)       UNDO        REDO        xxxxx           xxxxx       KP(N7)      KP(N8)      KP(N9)      xxxxx
                SEL_ALL     CUT         COPY        PASTE       xxxxx           xxxxx       HR(N4,         N5,         N6,      DOT)
                xxxxx       xxxxx       xxxxx       xxxxx       xxxxx           xxxxx       KP(N1)      KP(N2)      KP(N3)      xxxxx
                                                    xxxxx       _____           _____       KP(N0)
            >;
        };


        right {
            display-name = "right";
            bindings = <
                xxxxx       xxxxx       xxxxx       xxxxx       xxxxx           xxxxx       xxxxx       KP(UP)      xxxxx       xxxxx
                xxxxx       xxxxx       xxxxx       xxxxx       xxxxx           xxxxx       KP(LEFT)    KP(DOWN)    KP(RIGHT)   xxxxx
                xxxxx       xxxxx       xxxxx       xxxxx       xxxxx           xxxxx       xxxxx       xxxxx       xxxxx       xxxxx
                                                    xxxxx       _____           _____       xxxxx
            >;
        };

        both {
            display-name = "both";
            bindings = <
                BOOT        BT(SEL 0)   BT(SEL 1)   BT(SEL 2)   BT(CLR)         xxxxx       xxxxx       xxxxx       xxxxx       xxxxx
                xxxxx       xxxxx       xxxxx       xxxxx       xxxxx           xxxxx       xxxxx       xxxxx       xxxxx       xxxxx
                xxxxx       xxxxx       xxxxx       xxxxx       xxxxx           xxxxx       xxxxx       xxxxx       xxxxx       xxxxx
                                                    xxxxx       _____           _____       xxxxx
            >;
        };
    };
};
