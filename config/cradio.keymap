#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#undef CUT
#undef COPY
#undef UNDO

#define KP(k)       &kp k
#define FN(num)     &ht_fn F##num N##num
#define HL(a,b,c,d) &hrl LCTRL a &hrl LALT b &hrl LGUI c &hrl LSHFT d
#define HR(a,b,c,d) &hrr RSHFT a &hrr RGUI b &hrr RALT c &hrr RCTRL d
#define L1(t)       &lt 1 t
#define L2(t)       &lt 2 t
#define BT(c)       &bt BT_##c
#define BOOT        &bootloader
#define VOL_UP      &kp K_VOL_UP
#define VOL_DN      &kp K_VOL_DN
#define MUTE        &kp K_MUTE
#define _____       &trans
#define xxxxx       &none

#if defined(KEYMAP_OS_LINUX)
    #define SEL_ALL     LC(A)
    #define CUT         LC(X)
    #define COPY        LC(C)
    #define PASTE       LC(V)
    #define PASTEWF     &kp LC(LS(V))
    #define UNDO        &kp LC(Z)
    #define REDO        &kp LC(LS(Z))
    #define LOCK        &kp LG(ESC)
    #define SLEEP       &kp LG(LS(S))
    #define POWER       &kp LG(LS(P))
#elif defined(KEYMAP_OS_MAC)
    #define SEL_ALL     LG(A)
    #define CUT         LG(X)
    #define COPY        LG(C)
    #define PASTE       LG(V)
    #define PASTEWF     &kp LG(LS(V))
    #define UNDO        &kp LG(Z)
    #define REDO        &kp LG(LS(Z))
    #define LOCK        &kp LC(LG(Q))
    #define SLEEP       &kp LA(LG(K_PWR))
    #define POWER       &kp LC(LA(LG(K_PWR)))
#else
    #error("KEYMAP_OS_LINUX or KEYMAP_OS_MAC not set")
#endif

#define QUICK_TAP   175

#define KEYS_L      0 1 2 3 4 10 11 12 13 14 20 21 22 23 24
#define KEYS_R      5 6 7 8 9 15 16 17 18 19 25 26 27 28 29
#define KEYS_T      30 31 32 33

#define MAKE_HRM(NAME, TRIGGER_POS) \
        NAME: NAME { \
            compatible = "zmk,behavior-hold-tap"; \
            #binding-cells = <2>; \
            flavor = "balanced"; \
            tapping-term-ms = <280>; \
            quick-tap-ms = <QUICK_TAP>; \
            require-prior-idle-ms = <150>; \
            bindings = <&kp>, <&kp>; \
            hold-trigger-key-positions = <TRIGGER_POS>; \
            hold-trigger-on-release; \
        };

&lt {
    quick-tap-ms = <QUICK_TAP>;
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        both {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    behaviors {
        MAKE_HRM(hrl, KEYS_R KEYS_T)
        MAKE_HRM(hrr, KEYS_L KEYS_T)
        ht_qu: hold-tap-qu {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            quick-tap-ms = <QUICK_TAP>;
            bindings = <&kp>, <&macro_qu>;
        };
        ht_fn: hold-tap-fn {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <400>;
            quick-tap-ms = <QUICK_TAP>;
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        macro_qu: macro-qu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp Q>
                , <&macro_release &kp RSHFT>
                , <&macro_tap &kp U>
                ;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_q {
            timeout-ms = <100>;
            key-positions = <2 3>;
            bindings = <&ht_qu Q 0>;
            layers = <0>;
        };
        combo_z {
            timeout-ms = <100>;
            key-positions = <1 2>;
            bindings = <&kp Z>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "base";
            bindings = <
                KP(J)       KP(G)       KP(M)       KP(P)       KP(V)           KP(SEMI)    KP(DOT)     KP(FSLH)    KP(SQT)     KP(DQT)
                HL(R,          S,          N,          D)       KP(B)           KP(COMMA)   HR(A,          E,          I,          H)
                KP(X)       KP(F)       KP(L)       KP(C)       KP(W)           KP(MINUS)   KP(U)       KP(O)       KP(Y)       KP(K)
                                                    KP(BSPC)    L1(T)           L2(SPACE)   KP(ENTER)
            >;
        };
        // !"Â£$%^&*()[]{}<>-=_+;:'@#~\|`,./?
        // !" $%^&*( [ { < -=_+;:'@#~ |`,./?
        //
        // !" $%^&*( [ { < -=_+;:'@#~ |`,./?
        // !" $%^&*( [ { < -=_+;:'@#~ |`,./?
        // !" $%^&*( [ { < -=_+;:'@#~ |`,./?
        left {
            display-name = "left";
            bindings = <
                KP(ESC)     xxxxx       UNDO        REDO        xxxxx           xxxxx       KP(N7)      KP(N8)      KP(N9)      xxxxx
                HL(SEL_ALL, CUT,        COPY,       PASTE)      PASTEWF         KP(DOT)     KP(N4)      KP(N5)      KP(N6)      xxxxx
                xxxxx       xxxxx       xxxxx       xxxxx       xxxxx           xxxxx       KP(N1)      KP(N2)      KP(N3)      xxxxx
                                                    xxxxx       _____           _____       KP(N0)
            >;
        };

        right {
            display-name = "right";
            bindings = <
                xxxxx       xxxxx       xxxxx       xxxxx       xxxxx           xxxxx       KP(PG_UP)   KP(UP)      KP(INS)     xxxxx
                xxxxx       xxxxx       xxxxx       xxxxx       xxxxx           KP(HOME)    KP(LEFT)    KP(DOWN)    KP(RIGHT)   KP(END)
                xxxxx       xxxxx       xxxxx       xxxxx       xxxxx           xxxxx       KP(PG_DN)   xxxxx       KP(DEL)     xxxxx
                                                    KP(TAB)     _____           _____       xxxxx
            >;
        };

        both {
            display-name = "both";
            bindings = <
                BOOT        BT(SEL 0)   BT(SEL 1)   BT(SEL 2)   BT(CLR)         LOCK        KP(F7)      KP(F8)      KP(F9)      KP(F10)
                xxxxx       xxxxx       xxxxx       xxxxx       xxxxx           SLEEP       KP(F4)      KP(F5)      KP(F6)      KP(F11)
                xxxxx       VOL_DN      VOL_UP      MUTE        xxxxx           POWER       KP(F1)      KP(F2)      KP(F3)      KP(F12)
                                                    xxxxx       _____           _____       xxxxx
            >;
        };
    };
};
